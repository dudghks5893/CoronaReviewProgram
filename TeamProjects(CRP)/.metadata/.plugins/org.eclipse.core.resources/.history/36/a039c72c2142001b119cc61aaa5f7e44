package view;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import model.DBConnect;
import model.Markets;
import model.Review;
import model.Singleton;

public class DetailsController implements Initializable {
	@FXML
	private Button backbt;
	@FXML
	private Button Reviewbt;
	@FXML
	private Label Mname;
	@FXML
	private Label Maddress;
	@FXML
	private Label Mtel;
	@FXML
	private Label Mtime;
	@FXML
	private Label totalAVG;
	@FXML
	private ImageView TotalAVG1;
	@FXML
	private ImageView TotalAVG2;
	@FXML
	private ImageView TotalAVG3;
	@FXML
	private ImageView TotalAVG4;
	@FXML
	private ImageView TotalAVG5;
	@FXML
	private ImageView AVG1_1;
	@FXML
	private ImageView AVG1_2;
	@FXML
	private ImageView AVG1_3;
	@FXML
	private ImageView AVG1_4;
	@FXML
	private ImageView AVG1_5;
	@FXML
	private ImageView AVG2_1;
	@FXML
	private ImageView AVG2_2;
	@FXML
	private ImageView AVG2_3;
	@FXML
	private ImageView AVG2_4;
	@FXML
	private ImageView AVG2_5;
	@FXML
	private ImageView AVG3_1;
	@FXML
	private ImageView AVG3_2;
	@FXML
	private ImageView AVG3_3;
	@FXML
	private ImageView AVG3_4;
	@FXML
	private ImageView AVG3_5;
	@FXML
	private ImageView AVG4_1;
	@FXML
	private ImageView AVG4_2;
	@FXML
	private ImageView AVG4_3;
	@FXML
	private ImageView AVG4_4;
	@FXML
	private ImageView AVG4_5;
	@FXML
	private Label ReviewCount;
	@FXML
	private VBox reviewbox;

	List<Review> list;
	DBConnect connect = new DBConnect();
	Connection conn;
	PreparedStatement pstmt;
	Statement stmt;
	ResultSet rs;

// 주소값 문자열로 입력
	String imgAddress = "img/Mask.png";
	String imgAddress2 = "img/Mask2.png";
// 이미지 객체를 만드는데 imgAddress,imgAddress2값으로 만듬 이걸 image,image2 변수에 넣음
	Image image = new Image(imgAddress);
	Image image2 = new Image(imgAddress2);


	@FXML
	public void GoBack(ActionEvent event) {
		backbt.getScene().getWindow().hide(); // 현재 페이지를 안보이게 닫기

		Stage ShopList = new Stage();
		try {
			Parent root = FXMLLoader.load(getClass().getResource("../view/ShopListCard.fxml"));
			Scene scene = new Scene(root);
			ShopList.setScene(scene);
			ShopList.setTitle("가게 리스트");
			ShopList.show();
		} catch (IOException e) {
			System.out.println("리뷰쓰러가기 오류 발생" + e.getMessage());
		}
	}
	@FXML
	public void GoReview(ActionEvent event) {
		Reviewbt.getScene().getWindow().hide(); // 현재 페이지를 안보이게 닫기

		Stage review = new Stage();
		try {
			Parent root = FXMLLoader.load(getClass().getResource("../view/review.fxml"));
			Scene scene = new Scene(root);
			review.setScene(scene);
			review.setTitle("리뷰 쓰기");
			review.show();
		} catch (IOException e) {
			System.out.println("리뷰쓰러가기 오류 발생" + e.getMessage());
		}
	}

//보여지는 곳 이니셜라이즈(초기화하다)
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// 리뷰를 새로 쓸때마다 리뷰카드에 내용을 담아서  보여지게 구현
		list = ReviewList();
		showReview(list);

		//가게 이름,주소,전화번호,영업시간 보여지게 구현
		Markets nbean = getMarkets();
		Singleton.setMtname(nbean.getNAME()); // 싱글톤으로 현재 가게이름 보냄 (리뷰쓰기에서 가게이름 받아오기 위해서)
		Mname.setText(nbean.getNAME());
		Maddress.setText(nbean.getADDRESS());
		Mtel.setText(nbean.getTEL());
		Mtime.setText(nbean.getTIME());
		//리뷰갯수 보여지게 구현
		Markets count = reviewcount();
		ReviewCount.setText(Integer.toString(count.getReviewCount()));
		//리뷰 각요소들의 평균을 총 평균으로 보여지게 구현
		Markets AVG = TotalAVG();
		totalAVG.setText(Integer.toString(AVG.getTotalAVG()));
		//각 요소들의 이미지들이 평균값을 참조하여 이미지가 바뀌게 구현
		imgAVG();
		//총 평균값을 참조하여 이미지가 바뀌게 구현
		imgtotalAVG();

	}


	public Markets reviewcount(){

		String sql = "select COUNT(*) FROM maskrate where marketid = ?";
		conn = connect.getConnection();
		Markets count = new Markets();
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,Singleton.getMartid());
		 	rs = pstmt.executeQuery();
		 	if(rs.next()){
		 		count.setReviewCount(rs.getInt(1));
		 	}
		} catch (Exception e) {
			System.out.println("DB에서 리뷰횟수 불러오기 실패:"+e.getMessage());
		}

		return count;
	}

	public void imgtotalAVG(){

		int totalAVG = TotalAVG().getTotalAVG();

		switch (totalAVG) {
		case 1:TotalAVG1.setImage(image);
			break;
		case 2:TotalAVG1.setImage(image);
			   TotalAVG2.setImage(image);
			break;
		case 3:TotalAVG1.setImage(image);
		       TotalAVG2.setImage(image);
		       TotalAVG3.setImage(image);

			break;
		case 4:TotalAVG1.setImage(image);
			   TotalAVG2.setImage(image);
			   TotalAVG3.setImage(image);
			   TotalAVG4.setImage(image);

			break;
		case 5:TotalAVG1.setImage(image);
		       TotalAVG2.setImage(image);
		       TotalAVG3.setImage(image);
		       TotalAVG4.setImage(image);
		       TotalAVG5.setImage(image);
			break;

		default:TotalAVG1.setImage(image2);
	            TotalAVG2.setImage(image2);
	            TotalAVG3.setImage(image2);
	            TotalAVG4.setImage(image2);
	            TotalAVG5.setImage(image2);
			break;
		}
	}

	public void imgAVG(){

		int type1 = AVG().getTYPE1();

		switch (type1) {
		case 1:AVG1_1.setImage(image);
			break;
		case 2:AVG1_1.setImage(image);
			   AVG1_2.setImage(image);
			break;
		case 3:AVG1_1.setImage(image);
			   AVG1_2.setImage(image);
			   AVG1_3.setImage(image);
			break;
		case 4:AVG1_1.setImage(image);
			   AVG1_2.setImage(image);
			   AVG1_3.setImage(image);
			   AVG1_4.setImage(image);
			break;
		case 5:AVG1_1.setImage(image);
			   AVG1_2.setImage(image);
			   AVG1_3.setImage(image);
			   AVG1_4.setImage(image);
			   AVG1_5.setImage(image);
		break;
		default:AVG1_1.setImage(image2);
				AVG1_2.setImage(image2);
				AVG1_3.setImage(image2);
				AVG1_4.setImage(image2);
				AVG1_5.setImage(image2);
			break;
		}
		int type2 = AVG().getTYPE2();

		switch (type2) {
		case 1:AVG2_1.setImage(image);
			break;
		case 2:AVG2_1.setImage(image);
			   AVG2_2.setImage(image);
			break;
		case 3:AVG2_1.setImage(image);
			   AVG2_2.setImage(image);
			   AVG2_3.setImage(image);
			break;
		case 4:AVG2_1.setImage(image);
			   AVG2_2.setImage(image);
			   AVG2_3.setImage(image);
			   AVG2_4.setImage(image);
			break;
		case 5:AVG2_1.setImage(image);
			   AVG2_2.setImage(image);
			   AVG2_3.setImage(image);
			   AVG2_4.setImage(image);
			   AVG2_5.setImage(image);
		break;
		default:AVG2_1.setImage(image2);
				AVG2_2.setImage(image2);
				AVG2_3.setImage(image2);
				AVG2_4.setImage(image2);
				AVG2_5.setImage(image2);
			break;
		}
		int type3 = AVG().getTYPE3();

		switch (type3) {
		case 1:AVG3_1.setImage(image);
			break;
		case 2:AVG3_1.setImage(image);
			   AVG3_2.setImage(image);
			break;
		case 3:AVG3_1.setImage(image);
			   AVG3_2.setImage(image);
			   AVG3_3.setImage(image);
			break;
		case 4:AVG3_1.setImage(image);
			   AVG3_2.setImage(image);
			   AVG3_3.setImage(image);
			   AVG3_4.setImage(image);
			break;
		case 5:AVG3_1.setImage(image);
			   AVG3_2.setImage(image);
			   AVG3_3.setImage(image);
			   AVG3_4.setImage(image);
			   AVG3_5.setImage(image);
		break;
		default:AVG3_1.setImage(image2);
				AVG3_2.setImage(image2);
				AVG3_3.setImage(image2);
				AVG3_4.setImage(image2);
				AVG3_5.setImage(image2);
			break;
		}
		int type4 = AVG().getTYPE4();

		switch (type4) {
		case 1:AVG4_1.setImage(image);
			break;
		case 2:AVG4_1.setImage(image);
			   AVG4_2.setImage(image);
			break;
		case 3:AVG4_1.setImage(image);
			   AVG4_2.setImage(image);
			   AVG4_3.setImage(image);
			break;
		case 4:AVG4_1.setImage(image);
			   AVG4_2.setImage(image);
			   AVG4_3.setImage(image);
			   AVG4_4.setImage(image);
			break;
		case 5:AVG4_1.setImage(image);
			   AVG4_2.setImage(image);
			   AVG4_3.setImage(image);
			   AVG4_4.setImage(image);
			   AVG4_5.setImage(image);
		break;
		default:AVG4_1.setImage(image2);
				AVG4_2.setImage(image2);
				AVG4_3.setImage(image2);
				AVG4_4.setImage(image2);
				AVG4_5.setImage(image2);
			break;
		}

	}
	public Markets TotalAVG(){

		String sql = "select AVG(type1+type2+type3+type4)/4 from maskrate where marketid = ?";
		conn = connect.getConnection();
		Markets Total = new Markets();
		try{
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,Singleton.getMartid());
		 	rs = pstmt.executeQuery();
		 	if(rs.next()){
		 		Total.setTotalAVG(rs.getInt(1));
		 	}
		} catch (Exception e) {
			System.out.println("DB에서 평균점수 불러오기 실패:"+e.getMessage());
		}
		return Total;
	}

	public Markets AVG(){

		String sql = "select AVG(type1),AVG(type2),AVG(type3),AVG(type4) from maskrate where marketid = ?";
		conn = connect.getConnection();
		Markets avg = new Markets();
		try{
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,Singleton.getMartid());
		 	rs = pstmt.executeQuery();
		 	if(rs.next()){
		 		avg.setTYPE1(rs.getInt(1));
		 		avg.setTYPE2(rs.getInt(2));
		 		avg.setTYPE3(rs.getInt(3));
		 		avg.setTYPE4(rs.getInt(4));
		 	}
		} catch (Exception e) {
			System.out.println("DB에서 평균점수 불러오기 실패:"+e.getMessage());
		}
		return avg;
	}

//마켓 이름 주소 전화번호 영업시간 가져오기 구현
	public Markets getMarkets() {
		// sql 작성
		String sql = "SELECT name,address,tel,time FROM market where marketid =? ";
		conn = connect.getConnection(); // 위에서 만든 DB연결 메소드
		Markets MT = new Markets();
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,Singleton.getMartid());
			rs = pstmt.executeQuery(); // 접속된 DB에서 쿼리를 실행하고 결과를 리턴
			if (rs.next()) {
				MT.setNAME(rs.getString(1));
				MT.setADDRESS(rs.getString(2));
				MT.setTEL(rs.getString(3));
				MT.setTIME(rs.getString(4));
			}
		} catch (Exception e) {
			System.out.println("DB에서 sql문을 실행불가: " + e);
		}
		return MT;
	}

//리뷰 카드 구현 메소드
	public void showReview(List<Review> list){
		for (int i = 0; i < list.size(); i++) {
			FXMLLoader fxmlLoader = new FXMLLoader();
			fxmlLoader.setLocation(getClass().getResource("Reviewcard.fxml"));

			try {

				HBox hbox = fxmlLoader.load();
				reviewbox.getChildren().add(hbox);
				ReviewcardController cic = fxmlLoader.getController();
				cic.setData(list.get(i));

			} catch (Exception e) {
				System.out.println("오류남");
			}
		}
	}

//리뷰 카드 구현 메소드
	private List<Review> ReviewList() {
		List<Review> ReviewList = new ArrayList<>();

		Review review;
		String sql = "SELECT id,time,text,type1,type2,type3,type4 from review,maskrate where review.maskid = maskrate.maskid and review.marketid = ? order by reviewid DESC";

		 conn = connect.getConnection(); // 위에서 만든 DB연결 메소드

		try {
			pstmt = conn.prepareStatement(sql); // 쿼리 객체 생성
			pstmt.setInt(1,Singleton.getMartid());
			rs = pstmt.executeQuery(); // 접속된 DB에서 쿼리를 실행하고 결과를 리턴
			while (rs.next()) {
				review = new Review(rs.getString("id"), rs.getString("time"), rs.getString("text"), rs.getString("type1"),
						rs.getString("type2"), rs.getString("type3"), rs.getString("type4"));
				ReviewList.add(review);
			}
		} catch (SQLException e) {
			System.out.println("DB에서 sql문을 실행불가:" + e.getMessage());
		}
		return ReviewList;
	}
}
